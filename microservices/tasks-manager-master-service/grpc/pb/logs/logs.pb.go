// Code generated by protoc-gen-go. DO NOT EDIT.
// source: logs.proto

package logspb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Logs struct {
	TaskName             string   `protobuf:"bytes,1,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	Command              string   `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	Error                string   `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	Output               string   `protobuf:"bytes,4,opt,name=output,proto3" json:"output,omitempty"`
	PlanTime             int64    `protobuf:"varint,5,opt,name=plan_time,json=planTime,proto3" json:"plan_time,omitempty"`
	ScheduleTime         int64    `protobuf:"varint,6,opt,name=schedule_time,json=scheduleTime,proto3" json:"schedule_time,omitempty"`
	StartTime            int64    `protobuf:"varint,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              int64    `protobuf:"varint,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Logs) Reset()         { *m = Logs{} }
func (m *Logs) String() string { return proto.CompactTextString(m) }
func (*Logs) ProtoMessage()    {}
func (*Logs) Descriptor() ([]byte, []int) {
	return fileDescriptor_782e6d65c19305b4, []int{0}
}

func (m *Logs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Logs.Unmarshal(m, b)
}
func (m *Logs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Logs.Marshal(b, m, deterministic)
}
func (m *Logs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Logs.Merge(m, src)
}
func (m *Logs) XXX_Size() int {
	return xxx_messageInfo_Logs.Size(m)
}
func (m *Logs) XXX_DiscardUnknown() {
	xxx_messageInfo_Logs.DiscardUnknown(m)
}

var xxx_messageInfo_Logs proto.InternalMessageInfo

func (m *Logs) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

func (m *Logs) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *Logs) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Logs) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *Logs) GetPlanTime() int64 {
	if m != nil {
		return m.PlanTime
	}
	return 0
}

func (m *Logs) GetScheduleTime() int64 {
	if m != nil {
		return m.ScheduleTime
	}
	return 0
}

func (m *Logs) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Logs) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type GetLogsRequest struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Start                int64    `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	After                int64    `protobuf:"varint,3,opt,name=after,proto3" json:"after,omitempty"`
	PageNumber           int32    `protobuf:"varint,4,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	ResultPerPage        int32    `protobuf:"varint,5,opt,name=result_per_page,json=resultPerPage,proto3" json:"result_per_page,omitempty"`
	Field                string   `protobuf:"bytes,6,opt,name=field,proto3" json:"field,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLogsRequest) Reset()         { *m = GetLogsRequest{} }
func (m *GetLogsRequest) String() string { return proto.CompactTextString(m) }
func (*GetLogsRequest) ProtoMessage()    {}
func (*GetLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_782e6d65c19305b4, []int{1}
}

func (m *GetLogsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLogsRequest.Unmarshal(m, b)
}
func (m *GetLogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLogsRequest.Marshal(b, m, deterministic)
}
func (m *GetLogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLogsRequest.Merge(m, src)
}
func (m *GetLogsRequest) XXX_Size() int {
	return xxx_messageInfo_GetLogsRequest.Size(m)
}
func (m *GetLogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLogsRequest proto.InternalMessageInfo

func (m *GetLogsRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *GetLogsRequest) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *GetLogsRequest) GetAfter() int64 {
	if m != nil {
		return m.After
	}
	return 0
}

func (m *GetLogsRequest) GetPageNumber() int32 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func (m *GetLogsRequest) GetResultPerPage() int32 {
	if m != nil {
		return m.ResultPerPage
	}
	return 0
}

func (m *GetLogsRequest) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

type GetLogsReply struct {
	ErrorNumber          int32    `protobuf:"varint,1,opt,name=error_number,json=errorNumber,proto3" json:"error_number,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Logs                 []*Logs  `protobuf:"bytes,3,rep,name=logs,proto3" json:"logs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLogsReply) Reset()         { *m = GetLogsReply{} }
func (m *GetLogsReply) String() string { return proto.CompactTextString(m) }
func (*GetLogsReply) ProtoMessage()    {}
func (*GetLogsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_782e6d65c19305b4, []int{2}
}

func (m *GetLogsReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLogsReply.Unmarshal(m, b)
}
func (m *GetLogsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLogsReply.Marshal(b, m, deterministic)
}
func (m *GetLogsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLogsReply.Merge(m, src)
}
func (m *GetLogsReply) XXX_Size() int {
	return xxx_messageInfo_GetLogsReply.Size(m)
}
func (m *GetLogsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLogsReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetLogsReply proto.InternalMessageInfo

func (m *GetLogsReply) GetErrorNumber() int32 {
	if m != nil {
		return m.ErrorNumber
	}
	return 0
}

func (m *GetLogsReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GetLogsReply) GetLogs() []*Logs {
	if m != nil {
		return m.Logs
	}
	return nil
}

func init() {
	proto.RegisterType((*Logs)(nil), "logspb.Logs")
	proto.RegisterType((*GetLogsRequest)(nil), "logspb.GetLogsRequest")
	proto.RegisterType((*GetLogsReply)(nil), "logspb.GetLogsReply")
}

func init() { proto.RegisterFile("logs.proto", fileDescriptor_782e6d65c19305b4) }

var fileDescriptor_782e6d65c19305b4 = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xdf, 0x8a, 0xd4, 0x30,
	0x14, 0xc6, 0xad, 0x9d, 0xfe, 0x3b, 0xed, 0xaa, 0x84, 0x65, 0xa9, 0x8a, 0x58, 0x2b, 0xc8, 0x5c,
	0xcd, 0xc5, 0x7a, 0xe5, 0x13, 0xe8, 0x85, 0x2c, 0x4b, 0xf4, 0xbe, 0x64, 0xa6, 0x67, 0x6b, 0x99,
	0xa6, 0x89, 0x49, 0x2a, 0xcc, 0x63, 0xf9, 0x54, 0xbe, 0x86, 0xe4, 0xa4, 0x15, 0x64, 0xef, 0xfa,
	0xfd, 0xbe, 0x8f, 0x73, 0xf2, 0x25, 0x05, 0x98, 0xd4, 0x60, 0x0f, 0xda, 0x28, 0xa7, 0x58, 0xea,
	0xbf, 0xf5, 0xb1, 0xfd, 0x13, 0xc1, 0xee, 0xab, 0x1a, 0x2c, 0x7b, 0x0d, 0x85, 0x13, 0xf6, 0xdc,
	0xcd, 0x42, 0x62, 0x1d, 0x35, 0xd1, 0xbe, 0xe0, 0xb9, 0x07, 0x77, 0x42, 0x22, 0xab, 0x21, 0x3b,
	0x29, 0x29, 0xc5, 0xdc, 0xd7, 0x4f, 0xc9, 0xda, 0x24, 0xbb, 0x86, 0x04, 0x8d, 0x51, 0xa6, 0x8e,
	0x89, 0x07, 0xc1, 0x6e, 0x20, 0x55, 0x8b, 0xd3, 0x8b, 0xab, 0x77, 0x84, 0x57, 0xe5, 0x97, 0xe8,
	0x49, 0xcc, 0x9d, 0x1b, 0x25, 0xd6, 0x49, 0x13, 0xed, 0x63, 0x9e, 0x7b, 0xf0, 0x7d, 0x94, 0xc8,
	0xde, 0xc3, 0x95, 0x3d, 0xfd, 0xc0, 0x7e, 0x99, 0x30, 0x04, 0x52, 0x0a, 0x54, 0x1b, 0xa4, 0xd0,
	0x1b, 0x00, 0xeb, 0x84, 0x71, 0x21, 0x91, 0x51, 0xa2, 0x20, 0x42, 0xf6, 0x4b, 0xc8, 0x71, 0xee,
	0x83, 0x99, 0x93, 0x99, 0xe1, 0xdc, 0x7b, 0xab, 0xfd, 0x1d, 0xc1, 0xb3, 0xcf, 0xe8, 0x7c, 0x59,
	0x8e, 0x3f, 0x17, 0xb4, 0xce, 0x1f, 0xde, 0xa9, 0x33, 0xce, 0x6b, 0xdf, 0x20, 0x3c, 0xa5, 0x81,
	0x54, 0x35, 0xe6, 0x41, 0x78, 0x2a, 0x1e, 0x1c, 0x86, 0xa2, 0x31, 0x0f, 0x82, 0xbd, 0x85, 0x52,
	0x8b, 0x01, 0xbb, 0x79, 0x91, 0x47, 0x34, 0xd4, 0x36, 0xe1, 0xe0, 0xd1, 0x1d, 0x11, 0xf6, 0x01,
	0x9e, 0x1b, 0xb4, 0xcb, 0xe4, 0x3a, 0x8d, 0xa6, 0xf3, 0x06, 0xf5, 0x4e, 0xf8, 0x55, 0xc0, 0xf7,
	0x68, 0xee, 0xc5, 0x80, 0x7e, 0xfc, 0xc3, 0x88, 0x53, 0x4f, 0xa5, 0x0b, 0x1e, 0x44, 0x8b, 0x50,
	0xfd, 0x3b, 0xb2, 0x9e, 0x2e, 0xec, 0x1d, 0x54, 0x74, 0xc1, 0xdb, 0xbe, 0x88, 0x46, 0x95, 0xc4,
	0xd6, 0x85, 0x2f, 0x20, 0x96, 0x76, 0x58, 0x9f, 0xc9, 0x7f, 0xb2, 0x06, 0x76, 0xfe, 0xb1, 0xeb,
	0xb8, 0x89, 0xf7, 0xe5, 0x6d, 0x75, 0x08, 0x2f, 0x7f, 0xa0, 0xa9, 0xe4, 0xdc, 0x7e, 0x81, 0xd2,
	0xab, 0x6f, 0x68, 0x7e, 0x8d, 0x27, 0x64, 0x9f, 0x20, 0x5b, 0xb7, 0xb2, 0x9b, 0x2d, 0xfd, 0xff,
	0xcd, 0xbd, 0xba, 0x7e, 0xc4, 0xf5, 0x74, 0x69, 0x9f, 0x1c, 0x53, 0xfa, 0xbb, 0x3e, 0xfe, 0x0d,
	0x00, 0x00, 0xff, 0xff, 0x20, 0x8a, 0xca, 0x13, 0x6b, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LogsServiceClient is the client API for LogsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogsServiceClient interface {
	GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsReply, error)
}

type logsServiceClient struct {
	cc *grpc.ClientConn
}

func NewLogsServiceClient(cc *grpc.ClientConn) LogsServiceClient {
	return &logsServiceClient{cc}
}

func (c *logsServiceClient) GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsReply, error) {
	out := new(GetLogsReply)
	err := c.cc.Invoke(ctx, "/logspb.LogsService/GetLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogsServiceServer is the server API for LogsService service.
type LogsServiceServer interface {
	GetLogs(context.Context, *GetLogsRequest) (*GetLogsReply, error)
}

// UnimplementedLogsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLogsServiceServer struct {
}

func (*UnimplementedLogsServiceServer) GetLogs(ctx context.Context, req *GetLogsRequest) (*GetLogsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}

func RegisterLogsServiceServer(s *grpc.Server, srv LogsServiceServer) {
	s.RegisterService(&_LogsService_serviceDesc, srv)
}

func _LogsService_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogsServiceServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logspb.LogsService/GetLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogsServiceServer).GetLogs(ctx, req.(*GetLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logspb.LogsService",
	HandlerType: (*LogsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLogs",
			Handler:    _LogsService_GetLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logs.proto",
}
